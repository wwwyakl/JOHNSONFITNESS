#ifndef __GLOBAL_CONFIG_H__
#define __GLOBAL_CONFIG_H__

#include <stdbool.h>

#include "JISTypes.h"
//#include "Global_Config.h"


#define TIME_CURRENT_YEAR	16

#define C_PASSWORD  			0x55aa

#define JOHNSON_WIFI_SERVERIP_PRODUCTION    "dapi-ls.jfit.co"
#define JOHNSON_WIFI_SERVERIP_QA            "qa.dls.jfit.co"
#define JOHNSON_WIFI_SERVERIP_STAGING       "staging.dls.jfit.co"

#define MAX_MAIRO_BOX                   256
#define MAX_TIME_ZONE                   65
#define WIFI_DAPI_VERSION               10
#define MAX_MACHINE_UUID                36 
#if ( WIFI_DAPI_VERSION == 9 )
    #define MAX_FRAME_SERIAL_NUMBER     15
    #define MAX_CONSOLE_SERIAL_NUMBER   15
#else
    #define MAX_FRAME_SERIAL_NUMBER     36
    #define MAX_CONSOLE_SERIAL_NUMBER   36
#endif

//#define TM
//#define EP
#define AE

typedef enum{
	FACTORY_DEFAULT_START,
	FACTORY_DEFAULT_MACHINE_TYPE = FACTORY_DEFAULT_START ,
	FACTORY_DEFAULT_MACHINE_MODEL,
    FACTORY_DEFAULT_CONSOLE_TYPE,
    FACTORY_DEFAULT_BRAND_ID,
	FACTORY_DRIVE_TYPE,
	FACTORY_LANGUAGE,
	FACTORY_UNIT,
	FACTORY_DEFAULT_MAX_USER_WEIGHT_LBS,
	FACTORY_DEFAULT_MIN_USER_WEIGHT_LBS,
	FACTORY_DEFAULT_MAX_USER_WEIGHT_KG,
	FACTORY_DEFAULT_MIN_USER_WEIGHT_KG,
	FACTORY_DEFAULT_DISPLAY_MODE,
	FACTORY_DEFAULT_VERSION_MAJOR,
	FACTORY_DEFAULT_VERSION_MINOR,
	FACTORY_DEFAULT_VERSION_REVISION,
	FACTORY_DEFAULT_MAX_SPEED_MPHX10,
	FACTORY_DEFAULT_MIN_SPEED_MPHX10,
	FACTORY_DEFAULT_MAX_SPEED_KPHX10,
	FACTORY_DEFAULT_MIN_SPEED_KPHX10,
	FACTORY_DEFAULT_MAX_RPM_MPHX10,
	FACTORY_DEFAULT_MIN_RPM_MPHX10,
	FACTORY_DEFAULT_MAX_RPM_KPHX10,
	FACTORY_DEFAULT_MIN_RPM_KPHX10,
	FACTORY_DEFAULT_MAX_INCLINEX10,
	FACTORY_DEFAULT_MIN_INCLINEX10,
	FACTORY_DEFAULT_MAX_INCLINE_ADC,
	FACTORY_DEFAULT_MIN_INCLINE_ADC,
	FACTORY_DEFAULT_MAX_RESISTANCE,
	FACTORY_DEFAULT_MIN_RESISTANCE,
	FACTORY_DEFAULT_FORCE_UPDATE			,
	FACTORY_DEFAULT_FIRMWARE_AVAILANLE		,
	FACTORY_DEFAULT_DEMO_MODE_ON			,
	FACTORY_DEFAULT_ENERGY_SAVER_ON		,
	FACTORY_DEFAULT_BUZZER_ON			,
	FACTORY_DEFAULT_RTC_PRESET			,
	FACTORY_DEFAULT_24HOURS_FORMAT		,
	FACTORY_DEFAULT_ACCUMULATED_AGING_HOURS	,
	FACTORY_DEFAULT_VOLUME			,
	FACTORY_DEFAULT_BRIGHTNESS		,
	FACTORY_DEFAULT_AGE			,
	FACTORY_DEFAULT_WEIGHT_STANDARD		,
	FACTORY_DEFAULT_WEIGHT_METRIC		,
	FACTORY_DEFAULT_CSAFE_ID			,
	FACTORY_DEFAULT_CSAFE_MANU_FACTURE_ID		,
	FACTORY_DEFAULT_CSAFE_MODE_ID			,
	FACTORY_DEFAULT_CLUB_ID			,
	FACTORY_DEFAULT_AUTO_LOGIN			,
	FACTORY_DEFAULT_AP_MODE_ON			,
	FACTORY_DEFAULT_RF_CHANNEL			,
	FACTORY_DEFAULT_RF_ADDRESS			,
    FACTORY_DEFAULT_ERP_WAITING_TIME                ,
    FACTORY_DEFAULT_DEMO_WAIT_TIME                  ,
    FACTORY_DEFAULT_MAX_AGE		,
	FACTORY_DEFAULT_MIN_AGE		,
	FACTORY_DEFAULT_TARGETHR	,
	FACTORY_DEFAULT_END
}FACTORY_DEFAULT_TYPE;


typedef enum{
    SETTING_STRING_START ,
    SETTING_DEFAULT_MACHINE_UUID = SETTING_STRING_START,
    SETTING_DEFAULT_SERIAL_NUMBER,
    SETTING_DEFAULT_FRAME_NUMBER,
    SETTING_DEFAULT_TIME_ZONE,
    SETTING_MARIOX_PRODUCTION_ADDRESS,
    SETTING_MARIOX_QA_ADDRESS,
    SETTING_MARIOX_STAGING_ADDRESS,
    SETTING_DEFAULT_SSID,
    SETTING_STRING_END
}SystemSettingString;


typedef struct{
    UINT16 StringMaxLength;
    char* strings;    
}SystemSettingType;


typedef struct
{
    UINT16 MaxSpeed;
    UCHAR  AddStep;
    UCHAR  DecStep;
}LCB_SPEED_REF;

typedef enum
{
    MATRIX  = 0,
    VISION,
    HORIZON,
    SPRINT_8,
    JOHNSON,
    MATRIX_RETIAL,
    BRAND_TOTALS
}BRAND_ID;

typedef enum
{
    MALE = 0,
    FEMALE,
    GENDER_TOTALS
}GENDER;

typedef enum
{
    TREADMILL =0,
    ELLIPTICAL=1,
    BIKE      =2,
    ASCENT    =3,
    STEPPER   =4,
    CLIMB_MILL=5,
    ROWER     =6,
    MACHINE_TYPE_TOTALS
}MACHINE_TYPE;

typedef enum
{
    LANGUAGE_ID_START=0,
    ENGLISH_US = LANGUAGE_ID_START,
    ENGLISH_UK,
    ENGLISH_AUSTRALIA,
    GERMANY,
    FRENCH,
    ITALIAN,
    SPANISH,
    DUTCH,
    PORTUGUESE,
    KOREAN,
    ARABIC,
    SWEDISH,
    RUSSIAN,
    FINNISH,
    CHT,
    CHS,
    JAPANESE,
    TURKISH,
    VIETNAMESE,
    ALL_LANGUAGE_ID
}LANGUAGE_ID;

typedef enum
{
    STANDARD  = 0,
    METRIC    = 1,
    UNIT_TOTALS
}UNIT;


typedef enum
{
    NO_MCB                =0x00,   
    AC_LCB_JIS            =0x01,   //电跑下控
    LCB1_JHT              =0x02,   //电跑下控
    LCB3_JHT              =0x03,   //电跑下控
    DC_LCB_JIS            =0x04,   //电跑JIS直流电跑
    LCB_CD_COSTDN_JHT     =0x05,   //电跑下控
    TM_LCB_PANATTA        =0x06,   //电跑JIS直流电跑
    LCB1_PWN_JHT          =0x07,   //电跑下控
    LCB3_CURRENT_JHT      =0x08,   //电跑下控
    LCB1_PANATTA          =0x09,   //电跑下控
    LCB2_A5X_REDESIGN     =0x0A,   //电跑下控
    EP_0B_JIS             =0x0B,   //升降EP
    BIKE_0C_JIS           =0x0C,   //电磁铁BIKE下控--是否有升降未知
    DC_LCB_20_275HP_JIS   =0x0D,   //电跑下控
    DC_LCB_30_325HP_JIS   =0x0E,   //电跑下控
    AC_LCB_20_275HP_JIS   =0x0F,   //电跑下控
    AC_LCB_30_325HP_JIS   =0x10,   //电跑下控
    AD_BOARD_JIS          =0x11,
    DIGITAL_ECB           =0x12,   //ECB下控--是否有升降未知
    LCBA                  =0x13,
    INDUCTOR_BRAKE_INCLINE=0x15,   //有升降电磁铁下控
    ECB_JIS               =0xB4,   //无升降ECB下控
    ECB_INDUCTOR_BRAKE    =0xB5,   //电磁铁下控--是否有升降未知
    DCI_DAUGHTER_BOARD    =0xC0,
    MCB_TOPTEK            =0xC1,   //电跑阳刚下控
    MCB_DELTA             =0xC2,   //电跑台达下控
    MCB_DELTA_COMMOCIAL   =0xC3    //电跑台达商用下控
}MCB_TYPE;


typedef enum
{
    PS_MANUAL,
    PS_WEIGHT_LOSS,
    PS_INTERVALS,
    PS_DISTANCE_GOAL,
    PS_CALORIES_GOAL,
    PS_HILL_CLIMB,
    PS_THR_ZONE,
    PS_MYFIRST5K,
    PS_FATBURN,
    PS_CUSTOM_TIME,
    PS_SPRINTS,
    PS_CUSTOM_HR,
    PS_CUSTOM_DISTANCE,
    PS_CUSTOM,
    
    PS_ROLLING_HILLS,
    PS_SPRINT8,
    
    PS_INTERVALS_HR,
    PS_STEPS_THR,
    PS_SPRING_CLASSIC,
    PS_INTERVAL_PLUS,
    PS_WEIGHTLOSS_PLUS,
    
    
    PS_STEPS_GOAL,
    PS_CLIMB_GOAL,
    PS_5K,
    PS_10K,
    PS_20K,
    PS_40K,
    PS_PTHR,
    PS_THR_INTERVALS,
    PS_CONSTANT_WATTS,
    PS_WATT_INTERVALS,
    PS_GERKIN,
    PS_PEB,
    PS_FITNESS_TEST,
    
    //PS_CUSTOM,
    
    PS_TOTALS,
}PROGRAM_ID;
typedef enum
{
  PS_IDLE = 0,
  PS_SELECTPRG,
  PS_SETUP,
  PS_WAIT_3S,
  PS_RESTART_321,  
  PS_PAUSED,
  PS_COMPLETED,
  PS_WARMUP,
  PS_RUN,
  PS_COOLDOWN,
  PS_DEMO,
  PS_TOTAL
}PROGRAM_STATUS;

typedef enum 
{
  VK_NULL = 0,
  VK_START = 1,
  VK_WARMUP,
  VK_COOLDOWN,
  VK_STOP,
  VK_PAUSE,
  VK_RESET,
  VK_WORKOUT_COMPLETE,
  VK_UPDATE,
  VK_UP,
  VK_DOWN,  //10
  VK_1WEEKMISSED,
  VK_2WEEKMISSED,
  VK_SAFEKEYOFF,
  VK_SAFEKEYON,
  VK_SPEEDUP,  //15
  VK_SPEEDDOWN,
  VK_INCLINEUP,
  VK_INCLINEDOWN,
  VK_RESISTANCEUP,
  VK_RESISTANCEDOWN,
  VK_LEVELUP,  //21
  VK_LEVELDOWN,
  VK_AGEUP,
  VK_AGEDOWN,
  VK_WEIGHTUP,
  VK_WEIGHTDOWN,//26
  VK_GENDERTOGGLE,
  VK_HRTUP,
  VK_HRTDOWN,
  VK_WATTS_TARGET_UP,
  VK_WATTS_TARGET_DOWN,//31
  VK_DISTANCE_TARGET_UP,
  VK_DISTANCE_TARGET_DOWN,
  VK_WORKOUT_TIME_UP,
  VK_WORKOUT_TIME_DOWN,
  VK_CAL_TARGET_UP,//36
  VK_CAL_TARGET_DOWN,
  VK_STEP_TARGET_UP,
  VK_STEP_TARGET_DOWN,
  VK_CLIMB_TARGET_UP,
  VK_CLIMB_TARGET_DOWN,//41
  VK_NUM0,
  VK_NUM1,
  VK_NUM2,
  VK_NUM3,
  VK_NUM4,//46
  VK_NUM5,
  VK_NUM6,
  VK_NUM7,
  VK_NUM8,
  VK_NUM9,//51
  VK_LONG_SET_SPEED,
  VK_SET_SPEED,
  VK_LONG_SET_INCLINE,
  VK_SET_INCLINE,
  VK_LONG_SET_RESISTANCE,
  VK_SET_RESISTANCE,
  VK_SET_WEIGHT,
  VK_SET_WATTS,
  VK_SET_LEVEL,
  VK_CLEAR_BOOT,
  VK_PCUSTOM_NEXT_SEGMENT, 
  VK_BLUETOOTH,
  VK_QK_SPEED1,
  VK_QK_SPEED2,
  VK_QK_SPEED3,
  VK_QK_SPEED4,
  VK_QK_SPEED5,
  VK_QK_SPEED6,
  VK_QK_SPEED7,
  VK_QK_SPEED8,
  VK_QK_SPEED9,
  VK_QK_SPEED10,
  VK_QK_SPEED11,
  VK_QK_SPEED12,
  VK_QK_SPEED13,
  VK_QK_SPEED14,
  VK_QK_SPEED15,
  VK_QK_SPEED16,
  VK_QK_SPEED17,
  VK_QK_SPEED18,
  VK_QK_SPEED19,
  VK_QK_SPEED20,
  VK_QK_RESISTACE_1,
  VK_QK_RESISTACE_2,
  VK_QK_RESISTACE_3,
  VK_QK_RESISTACE_4,
  VK_QK_RESISTACE_5,
  VK_QK_RESISTACE_6,
  VK_QK_RESISTACE_7,
  VK_QK_RESISTACE_8,
  VK_QK_RESISTACE_9,
  VK_QK_RESISTACE_10,
  VK_QK_RESISTACE_11,
  VK_QK_RESISTACE_12,
  VK_QK_RESISTACE_13,
  VK_QK_RESISTACE_14,
  VK_QK_RESISTACE_15,
  VK_QK_RESISTACE_16,
  VK_QK_RESISTACE_17,
  VK_QK_RESISTACE_18,
  VK_QK_RESISTACE_19,
  VK_QK_RESISTACE_20,
  VK_QK_RESISTACE_21,
  VK_QK_RESISTACE_22,
  VK_QK_RESISTACE_23,
  VK_QK_RESISTACE_24,
  VK_QK_RESISTACE_25,
  VK_QK_RESISTACE_26,
  VK_QK_RESISTACE_27,
  VK_QK_RESISTACE_28,
  VK_QK_RESISTACE_29,
  VK_QK_RESISTACE_30,
#ifdef TM
  VK_QK_INCLINE_0,  //0 or 0
  VK_QK_INCLINE_5,  //5 or 0.5
  VK_QK_INCLINE_10, //10 or 1.0
  VK_QK_INCLINE_15, //15 or 1.5
  VK_QK_INCLINE_20, //20 or 2.0
  VK_QK_INCLINE_25,
  VK_QK_INCLINE_30,
  VK_QK_INCLINE_35,
  VK_QK_INCLINE_40, //40 or 4.0
  VK_QK_INCLINE_45,
  VK_QK_INCLINE_50,
  VK_QK_INCLINE_55,
  VK_QK_INCLINE_60, //60 or 6.0
  VK_QK_INCLINE_65,
  VK_QK_INCLINE_70,
  VK_QK_INCLINE_75,
  VK_QK_INCLINE_80, //80 or 8.0
  VK_QK_INCLINE_85,
  VK_QK_INCLINE_90,
  VK_QK_INCLINE_95,
  VK_QK_INCLINE_100, //100 or 10.0
  VK_QK_INCLINE_105,
  VK_QK_INCLINE_110,
  VK_QK_INCLINE_115,
  VK_QK_INCLINE_120, //120 or 12.0
  VK_QK_INCLINE_125,
  VK_QK_INCLINE_130,
  VK_QK_INCLINE_135,
  VK_QK_INCLINE_140,
  VK_QK_INCLINE_145,
  VK_QK_INCLINE_150, //150 or 15.0
#else 
  VK_QK_INCLINE_0,  //0 or 0%
  VK_QK_INCLINE_10, //1 or 5%
  VK_QK_INCLINE_20, //2 or 10%
  VK_QK_INCLINE_30, //3 or 15%
  VK_QK_INCLINE_40, //4 or 20%
  VK_QK_INCLINE_50,
  VK_QK_INCLINE_60,
  VK_QK_INCLINE_70,
  VK_QK_INCLINE_80, //8 or 40%
  VK_QK_INCLINE_90,
  VK_QK_INCLINE_100,
  VK_QK_INCLINE_110,
  VK_QK_INCLINE_120, //12 or 60%
  VK_QK_INCLINE_130,
  VK_QK_INCLINE_140,
  VK_QK_INCLINE_150,
  VK_QK_INCLINE_160, //16 or 80%
  VK_QK_INCLINE_170,
  VK_QK_INCLINE_180,
  VK_QK_INCLINE_190,
  VK_QK_INCLINE_200, //20 or 100%
#endif
  VK_SET_MYFIRST5K_SPEED,
  VK_SET_WORKOUT_TIME,
  VK_SET_WORKOUT_DISTANCE,
  VK_SET_WORKOUT_CALORIES,
  VK_SET_WORKOUT_TARGETHR,
  VK_SET_USER,
  VK_ENTER,
  VK_CHANGE_DISPLAY,
  VK_BACK,
  VK_RTC,
  VK_ENG,
  VK_FAN,
  VK_RF,
  VK_RF_SYNC,
  VK_WIFI_AP,
  VK_INITIAL,	
  VK_WIFI,
  VK_PAUSE_START,
  VK_ENTER_CHANGEDIS,
  VK_SPEEDUP_LONG_PRESS,
  VK_SPEEDUP_RElEASE,
  VK_SCAN,
  //    VK_SAFETY_KEY_OFF,
  //    VK_SAFETY_KEY_ON,
  VK_DEMO,    //zsf
  VK_DEMO_ERP_WAKEUP,
  VK_BT_CHANGMODE,
  VK_BT_UPDATE,   //zsf   
  VR_MANUAL,
  VR_DISTANCE,
  VR_WEIGHT_LOSS,
  VR_CALORIES,
  VR_INTERVALS,
  VR_HRT_RATE,
  VR_MY_FISRT5K,
  VR_CUSTOM,
  VR_CUSTOM_HRT,
  VR_SPRINTS,
  VR_SELECT_PROGRAM,
  
  VR_TOTAL_KEYS
}VR_KEY;

//#pragma pack( push, 1 )
typedef struct tag_ModelDefaults
{
    UINT16 maxSpeedSTDX10;
    UINT16 minSpeedSTDX10;
    UINT16 maxSpeedKPHX10;
    UINT16 minSpeedKPHX10;
    UINT16 maxRPMSTD;
    UINT16 minRPMSTD;
    UINT16 maxRPMKPH;
    UINT16 minRPMKPH;
    UINT16 maxIncline;
    UINT16 minIncline;
    UINT16 maxInclineADC;
    UINT16 minInclineADC;
    UINT8 maxResistance;
    UINT8 minResistance;
    MACHINE_TYPE machineType;
    MCB_TYPE mcbType;
    UINT8 machineModelDAPI;
    UINT8 models;
    UINT8 brandid;
}MODEL_DEFAULTS;
//#pragma pack( pop )

typedef enum {
	FRAME_STAGE_START 		= 0,
	FRAME_STAGE_MODEL 		=  0x0100,
	FRAME_STAGE_USER   		=  0x0200,
	FRAME_STAGE_PRGSETUP	=  0x0300,
	FRAME_STAGE_ENG 		=  0x0400,
	FRAME_STAGE_SAFFKEYOFF  =  0x0500,
	FRAME_STAGE_AGINGTEST 	=  0x0600,
	FRAME_STAGE_ERP_COUNT 	=  0x0700,
	FRAME_STATE_USBMAN      =  0x0800,
	FRAME_STAGE_PRGRUN 		=  0x0900,
	FRMAE_STATE_DEMOMODE    =  0x0A00,
    FRMAE_STATE_WIFI        =  0x0B00,
    FRAME_STAGE_RTC         =  0x0C00,
	FRAME_STAGE_END  
}FRAME_STAGE;


#define MAX_SUPPORTED_MODELS   32   //本仪表最多可支持32个机种型号
#endif
